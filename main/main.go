package main

import (
	"config"
	"database/sql"
	"fmt"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	_ "github.com/mattn/go-sqlite3"
	"log"
	"my_database"
	"strconv"
	"strings"
	"sync"
	"tgbot"
	"time"
)

var DB my_database.DataBaseSites
var bot tgbot.TGBot
var cfg config.Config
var MU sync.Mutex

func catchError(err error) {
	if err != nil {
		log.Println(err)
	}
}

func detectYoungHacker(update tgbotapi.Update) {
	bot.SendMessage(update.Message.From.ID, "Oh no, La Police...", false)
}

func adminByLink(update tgbotapi.Update) bool {
	text := update.Message.CommandArguments()
	if DB.IsPassword(text) {
		err := DB.AddAdmin(update.Message.From.ID)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "+
					"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), false,
			)
			return false
		}
		DB.DelPassword(text)
		return true
	}
	return false
}

func getLinkForAdmin() string {
	pass := DB.GetPassword(cfg.LenOfPass)
	url := "https://t.me/MoscowProgrammingTeam_bot?start=" + pass
	return url
}

func groupByLink(update tgbotapi.Update) (int64, bool, bool) {
	text := update.Message.CommandArguments()
	group := DB.GroupByKeyword(text)
	invitable := DB.IsInvitable(group)
	wasingroup := DB.WasInGroup(update, group)
	if group != -1 && (invitable || wasingroup) {
		DB.AddInGroup(update, group, wasingroup)
		//	–¥–æ–±–∞–≤–∏–ª–∏ —é–∑–µ—Ä–∞ –∫ –≥—Ä—É–ø–ø–µ
	}
	return group, invitable, wasingroup
}

func needsNameRegistration(userID int) bool {
	var name, surname string
	err := DB.DB.QueryRow(
		"SELECT user_name, user_surname FROM users WHERE user_id = ?",
		userID,
	).Scan(&name, &surname)

	return err != nil || name == "" || surname == ""
}

func askForName(userID int) {
	bot.SendMessage(userID, "üìù–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ /s \n–ü—Ä–∏–º–µ—Ä:\n /s –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n /s –ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
		true)
}

func handleName(update tgbotapi.Update) {
	chatID := update.Message.From.ID
	text := update.Message.CommandArguments()
	parts := strings.SplitN(strings.TrimSpace(text), " ", 2)
	if len(parts) != 2 {
		bot.SendMessage(chatID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª", false)
		askForName(chatID)
		return
	}
	if err := DB.SaveUserName(update.Message.From.ID, parts[0], parts[1]); err != nil {
		bot.SendMessage(chatID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", false)
		return
	}
	bot.SendMessage(
		int(update.Message.Chat.ID),
		fmt.Sprintf("‚úÖ –°–ø–∞—Å–∏–±–æ, %s %s! –í–∞—à–µ –∏–º—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.", parts[0], parts[1]), false)
}

func CatchPrivateCommand(update tgbotapi.Update) {
	command := update.Message.Command()
	if command == "start" {
		grouplink, invitable, wasingroup := groupByLink(update)
		if grouplink != -1 {
			if wasingroup {
				bot.SendMessage(update.Message.From.ID, "–¢–µ–ø–µ—Ä—å –≤—ã –∑–∞–¥–∞–µ—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –≥—Ä—É–ø–ø—É (–¥—Ä—É–≥–∞—è –≥—Ä—É–ø–ø–∞, –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏—à–ø–∏–ª–∏—Ç—å –Ω–∞–¥–æ)", false)
			} else if invitable {
				bot.SendMessage(update.Message.From.ID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –≥—Ä—É–ø–ø—É. –ß—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º", false)
			} else {
				bot.SendMessage(update.Message.From.ID, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–ø–∏—Å—å –≤ –¥–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞. –°–æ–æ–±—â–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –æ–± —ç—Ç–æ–π –ø—Ä–æ–±–ª–µ–º–µ", false)
			}
		}
		newAdmin := adminByLink(update)
		if newAdmin {
			bot.SendMessage(update.Message.From.ID, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", false)
		} else {
			if needsNameRegistration(update.Message.From.ID) {
				askForName(update.Message.From.ID)
			}
		}
		return
	}
	if DB.IsBanned(update.Message.From.ID, DB.GetGroupByUserID(update.Message.From.ID)) {
		bot.SendMessage(update.Message.From.ID, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é", false)
		return
	}
	switch command {
	case "getlink":
		if fl, err := DB.IsAdmin(update.Message.From.ID); err == nil && fl {
			bot.SendMessage(update.Message.From.ID, "–°—Å—ã–ª–∫–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: "+getLinkForAdmin(), false)
		} else {
			detectYoungHacker(update)
		}

	case "changename":
		askForName(update.Message.From.ID)

	case "s":
		handleName(update)
	}
}

func getUserIDByReply(update tgbotapi.Update) (int, error) {
	if update.Message.ReplyToMessage.ForwardFrom != nil {
		return update.Message.ReplyToMessage.ForwardFrom.ID, nil
	}
	msgID := update.Message.ReplyToMessage.MessageID
	return DB.GetUserIDByMsgIDInAdminChat(msgID)
}

func getUserIDByMsg(update tgbotapi.Update) (int, error) {
	text := update.Message.CommandArguments()
	userID, err := strconv.Atoi(text)
	return userID, err
}

func printHeadOfQuestion(chatID int, user_name string, user_id int) {
	bot.SendMessage(
		chatID,
		fmt.Sprintf("‚ùì *–í–æ–ø—Ä–æ—Å –æ—Ç:* %s\nüë§ *ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `%d`",
			user_name, user_id), true,
	)
}

const askConst = "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞–≤ –≤–æ–ø—Ä–æ—Å –∏ –ø—Ä–∏–ª–æ–∂–∏–≤ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã. –ó–∞—Ç–µ–º —è –∑–∞–¥–∞–º —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω—ã–º –∫ –≥—Ä—É–ø–ø–µ."

func CatchGroupCommand(update tgbotapi.Update) {
	if fl, err := DB.IsAdmin(update.Message.From.ID); err == nil && !fl {
		bot.SendMessage(int(update.Message.Chat.ID), "God Damn!", false)
		detectYoungHacker(update)
		return
	}
	command := update.Message.Command()
	switch command {
	case "getlink":
		bot.SendMessage(int(update.Message.Chat.ID), "–°—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –≥—Ä—É–ø–ø—É: "+getLinkForUsers(update), false)

	case "getquestions":
		user_ids, admin_msg_ids, user_msg_ids, user_chat_ids, user_names, group_ids := DB.GetQuestionsFromUsers(cfg.CountOfQuestions, update.Message.Chat.ID)
		if len(user_chat_ids) == 0 {
			bot.SendMessage(int(update.Message.Chat.ID), "‚úÖ –°–ø–∏—Å–æ–∫ –Ω–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç", false)
			return
		}
		bot.SendMessage(
			int(update.Message.Chat.ID),
			fmt.Sprintf("üì¨ *–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã \\(%d\\):*", len(user_chat_ids)), true,
		)

		for i := 0; i < len(user_chat_ids); i++ {
			printHeadOfQuestion(int(update.Message.Chat.ID), user_names[i], user_ids[i])
			sent := bot.SendForward(group_ids[i],
				user_chat_ids[i],
				user_msg_ids[i])
			fmt.Println(sent)
			DB.SetNewAdminChatId(sent, admin_msg_ids[i])

			if i+1 < len(user_chat_ids) {
				bot.SendMessage(
					int(update.Message.Chat.ID),
					"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ", false,
				)
			}
		}

	case "stoplink":
		err := DB.StopGroupLink(update.Message.Chat.ID)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É : "+err.Error(), false,
			)
			return
		}
		bot.SendMessage(int(update.Message.Chat.ID), "‚úÖ –ó–∞–ø–∏—Å—å –≤ –≥—Ä—É–ø–ø—É —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", false)

	case "contlink":
		err := DB.ContinueGroupLink(update.Message.Chat.ID)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É : "+err.Error(), false,
			)
			return
		}
		bot.SendMessage(int(update.Message.Chat.ID), "‚úÖ –ó–∞–ø–∏—Å—å –≤ –≥—Ä—É–ø–ø—É —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.", false)

	case "ban":
		var userID int
		var err error
		if update.Message.ReplyToMessage != nil {
			userID, err = getUserIDByReply(update)
			if err != nil {
				bot.SendMessage(
					int(update.Message.Chat.ID),
					"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è. "+
						"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), false,
				)
				return
			}
		} else {
			userID, err = getUserIDByMsg(update)
			if err != nil {
				bot.SendMessage(
					int(update.Message.Chat.ID),
					"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "+
						"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ban <ID>` –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. "+
						"–û—à–∏–±–∫–∞: "+err.Error(), false,
				)
				return
			}
		}
		if fl, err := DB.IsAdmin(userID); err == nil && fl {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞: –Ω–µ–ª—å–∑—è –∑–∞–±–∞–Ω–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", false,
			)
		}
		err = DB.BanUser(userID, update.Message.Chat.ID)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞ –±–∞–Ω–∞: "+err.Error(), false,
			)
		} else {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `%d` –∑–∞–±–∞–Ω–µ–Ω", userID), true,
			)
		}

	case "unban":
		text := update.Message.CommandArguments()
		userID, err := strconv.Atoi(text)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "+
					"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unban <ID>. "+
					"–û—à–∏–±–∫–∞: "+err.Error(), false,
			)
			return
		}
		err = DB.UnBanUser(userID, update.Message.Chat.ID)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–∞–Ω–∞: "+err.Error(), false,
			)
		} else {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				fmt.Sprintf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `%d` —Ä–∞–∑–±–∞–Ω–µ–Ω", userID), true,
			)
		}

	case "delbannedq":
		cnt, err := DB.DeleteQuestionsFromBannedUsers(update.Message.Chat.ID)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\. –£–¥–∞–ª–µ–Ω–æ: %d —Å–æ–æ–±—â–µ–Ω–∏–π"+
					"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), cnt), false,
			)
			return
		}
		bot.SendMessage(
			int(update.Message.Chat.ID),
			fmt.Sprintf("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", cnt), false,
		)

	case "delq":
		if update.Message.ReplyToMessage == nil && len(update.Message.CommandArguments()) == 0 {
			cnt, err := DB.DeleteQuestionsFromUsers(update.Message.Chat.ID)
			if err != nil {
				bot.SendMessage(
					int(update.Message.Chat.ID),
					fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\\. –£–¥–∞–ª–µ–Ω–æ: %d —Å–æ–æ–±—â–µ–Ω–∏–π"+
						"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), cnt), false,
				)
				return
			}
			bot.SendMessage(
				int(update.Message.Chat.ID),
				fmt.Sprintf("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: %d", cnt), false,
			)

		} else {
			var userID int
			var err error
			if update.Message.ReplyToMessage != nil {
				userID, err = getUserIDByReply(update)
				if err != nil {
					bot.SendMessage(
						int(update.Message.Chat.ID),
						"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID —Å–æ–æ–±—â–µ–Ω–∏—è. "+
							"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), false,
					)
					return
				}
			} else {
				userID, err = getUserIDByMsg(update)
				if err != nil {
					bot.SendMessage(
						int(update.Message.Chat.ID),
						"‚ùå –û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. "+
							"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/ban <ID>` –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ. "+
							"–û—à–∏–±–∫–∞: "+err.Error(), false,
					)
					return
				}
			}
			cnt := DB.DeleteQuestionsFromUser(userID)
			bot.SendMessage(
				int(update.Message.Chat.ID),
				fmt.Sprintf("‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `%d` \\(%d –≤–æ–ø—Ä–æ—Å–æ–≤\\) ", userID, cnt), true,
			)
		}

	case "ask":
		bot.SendMessage(int(update.Message.Chat.ID), askConst, false)

	case "deletelastq":
		err := DB.DelLastAdminQuestion(update.Message.Chat.ID)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. "+
					"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), false,
			)
			return
		}
		bot.SendMessage(
			int(update.Message.Chat.ID),
			"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ", true,
		)

	case "getanswers":
		qId, err := strconv.Atoi(update.Message.CommandArguments())
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–ª–∏ ID –≤–æ–ø—Ä–æ—Å–∞. "+
					"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), false,
			)
			return
		}
		adminMsgID, err := DB.GetAdminMsgIDByQuestionIDAndGroupID(qId, update.Message.Chat.ID)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–ø—Ä–æ—Å–æ–º. "+
					"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), false,
			)
			return
		}
		answers, err := DB.GetAnswersForQuestion(adminMsgID, update.Message.Chat.ID)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å. "+
					"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), false,
			)
			return
		}
		results := FormatAnswersForTelegram(answers)
		bot.SendMessage(int(update.Message.Chat.ID), results, false)
	}
}

func getLinkForUsers(update tgbotapi.Update) string {

	keyword := DB.GetKeyword(update)
	url := "https://t.me/MoscowProgrammingTeam_bot?start=" + keyword
	return url
}

func addInNewGroup(update tgbotapi.Update) {
	err := DB.NewChat(update)
	if err != nil {
		bot.SendMessage(
			int(update.Message.Chat.ID),
			"‚ùå –û—à–∏–±–∫–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∑–∞–Ω–æ–≤–æ."+
				"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), false,
		)
	} else {
		bot.SendMessage(
			int(update.Message.Chat.ID), "‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É", false,
		)
	}
}

func forwardToGroup(update tgbotapi.Update, group int64) {
	msg := update.Message
	printHeadOfQuestion(int(group), DB.GetName(update.Message.From.ID), update.Message.From.ID)
	sent := bot.SendForward(group, msg.Chat.ID, msg.MessageID)
	DB.AddQuestionFromUser(update, sent)
	bot.SendMessage(
		int(update.Message.Chat.ID),
		fmt.Sprintf("‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–¥–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º\\. ID –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ \\- `%d`", msg.MessageID), true,
	)
}

func replyAdmin(update tgbotapi.Update) {
	repliedMsg := update.Message.ReplyToMessage

	userChatID, exists := DB.GetUserChatIdByAdminChatId(*repliedMsg)
	if !exists {
		log.Println("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
		return
	}
	userMsgID, err := DB.GetUserMsgIDByAdminID(repliedMsg.MessageID)
	catchError(err)
	bot.SendReplyMessage(
		userChatID,
		fmt.Sprintf("‚úÖ –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å ID `%d`", userMsgID), true, userMsgID,
	)
	bot.SendForward(int64(userChatID), update.Message.Chat.ID, update.Message.MessageID)

	bot.SendReplyMessage(
		int(update.Message.Chat.ID),
		fmt.Sprintf("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID \\- `%d`", userChatID), true, update.Message.MessageID,
	)
	DB.DelQuestionFromUser(*repliedMsg)
}

func replyAsk(update tgbotapi.Update) {
	id, err := DB.AddQuestionFromAdmin(update)
	if err != nil {
		bot.SendMessage(
			int(update.Message.Chat.ID),
			"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. "+
				"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), false,
		)
	} else {
		bot.SendMessage(
			int(update.Message.Chat.ID),
			fmt.Sprintf("‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\\! –ï–≥–æ id \\- `%d`",
				id), true,
		)
	}
}

func CatchReplyGroup(update tgbotapi.Update) {
	repliedMsg := update.Message.ReplyToMessage

	_, exists := DB.GetUserChatIdByAdminChatId(*repliedMsg)
	if exists {
		replyAdmin(update)
		return
	}
	if repliedMsg.Text == askConst {
		replyAsk(update)
		return
	}
}

func ParseAdminMsgIDFromSendQ(text string) (int, error) {
	prefix := "üì® –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –µ–≥–æ ID - "
	if !strings.HasPrefix(text, prefix) {
		return 0, fmt.Errorf("invalid message format")
	}

	idStr := strings.TrimSpace(text[len(prefix):])

	adminMsgID, err := strconv.Atoi(idStr)
	if err != nil {
		return 0, fmt.Errorf("invalid ID format: %v", err)
	}

	return adminMsgID, nil
}

func CatchAnswerOnAdminQuestion(update tgbotapi.Update) {
	repliedMsg := update.Message.ReplyToMessage
	adminMsgId, err := ParseAdminMsgIDFromSendQ(repliedMsg.Text)
	fmt.Println(adminMsgId)
	if err != nil {
		log.Println(err)
		return
	}
	user_group := DB.GetGroupByUserID(update.Message.From.ID)
	fl, err := DB.IsAdminQuestion(adminMsgId, user_group)
	fmt.Println(fl)
	if !fl {
		return
	}
	if err != nil {
		bot.SendMessage(
			int(update.Message.Chat.ID),
			"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ", false,
		)
		log.Println(err)
		return
	}
	fl, err = DB.DidUserAnswered(update.Message.From.ID, adminMsgId, user_group)
	if fl {
		bot.SendMessage(
			int(update.Message.Chat.ID),
			"‚ùå –û—à–∏–±–∫–∞: –í—ã —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å", false,
		)
		return
	}
	if err != nil {
		bot.SendMessage(
			int(update.Message.Chat.ID),
			"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ", false,
		)
		log.Println(err)
		return
	}
	userMsgId := update.Message.MessageID
	err = DB.AddUserAnswerOnAdminQuestion(update.Message.From.ID, userMsgId, adminMsgId, user_group, update.Message.Text)
	if err != nil {
		bot.SendMessage(
			int(update.Message.Chat.ID),
			"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ", false,
		)
		log.Println(err)
		return
	}
	bot.SendMessage(
		int(update.Message.Chat.ID),
		fmt.Sprintf("‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\\. –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å ID `%d`", adminMsgId), true,
	)
}

func CatchPrivateMessage(update tgbotapi.Update) {
	setUsername(update)
	if update.Message.IsCommand() {
		CatchPrivateCommand(update)
		return
	}
	group := DB.GetGroupByUserID(update.Message.From.ID)
	if DB.IsBanned(update.Message.From.ID, group) {
		bot.SendMessage(update.Message.From.ID, "‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é", false)
		return
	}
	if !DB.HasName(update.Message.From.ID) {
		askForName(update.Message.From.ID)
		return
	}
	if group == -1 {
		bot.SendMessage(update.Message.From.ID, "–í—ã –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω—ã –∫ –≥—Ä—É–ø–ø–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é –∑–∞ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É.", false)
	} else {
		if update.Message.ReplyToMessage != nil {
			CatchAnswerOnAdminQuestion(update)
		} else {
			forwardToGroup(update, group)
		}
	}
}

func CatchGroupMessage(update tgbotapi.Update) {
	//–≤ –≥—Ä—É–ø–ø–µ –±–æ—Ç–æ–º –º–æ–≥—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã
	if fl, err := DB.IsAdmin(update.Message.From.ID); err == nil && !fl {
		detectYoungHacker(update)
		_, err := bot.Bot.LeaveChat(tgbotapi.ChatConfig{
			ChatID: update.Message.Chat.ID,
		})
		catchError(err)
		return
	}

	if update.Message.NewChatMembers != nil {
		for _, member := range *update.Message.NewChatMembers {
			if member.ID == bot.Bot.Self.ID {
				addInNewGroup(update)
			}
		}
	}

	if update.Message.IsCommand() {
		CatchGroupCommand(update)
	} else {
		if update.Message.ReplyToMessage != nil && update.Message.ReplyToMessage.From.IsBot {
			CatchReplyGroup(update)
		}
	}
}

func CatchMessage(update tgbotapi.Update) {
	MU.Lock()
	defer MU.Unlock()

	chat := update.Message.Chat
	user := update.Message.From

	userID := user.ID
	var exists bool
	err := DB.DB.QueryRow("SELECT EXISTS(SELECT 1 FROM users WHERE user_id = ?)", userID).Scan(&exists)
	catchError(err)

	if !exists {
		_, err := DB.DB.Exec("INSERT INTO users(user_id, user_group) VALUES (?, -1)", userID)
		catchError(err)
	}

	//first user -> admin
	if DB.IsTableEmpty("admins") {
		err := DB.AddAdmin(user.ID)
		if err != nil {
			bot.SendMessage(
				int(update.Message.Chat.ID),
				"‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. "+
					"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: "+err.Error(), false,
			)
		}
	}

	if chat.Type == "private" {
		CatchPrivateMessage(update)
	}

	if chat.Type == "group" || chat.Type == "supergroup" {
		CatchGroupMessage(update)
	}
}

func CatchGroupCallbackQuery(update tgbotapi.Update) {

}

func CatchPrivateCallbackQuery(update tgbotapi.Update) {

}

func CatchCallbackQuery(update tgbotapi.Update) {
	if update.Message.Chat.Type == "private" {
		CatchPrivateCallbackQuery(update)
	} else {
		CatchGroupCallbackQuery(update)
	}
}

func SendFirstNotAnsweredQuestion(userID int) {
	adminMsgID, groupID, err := DB.GetFirstNotAnsweredQuestion(userID)
	if DB.IsBanned(userID, groupID) {
		return
	}
	if err != nil {
		if err.Error() != "no questions available" {
			log.Printf("[ERROR] User %d: %v", userID, err)
		}
		return
	}

	bot.SendMessage(userID, fmt.Sprintf("üì® –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å, –µ–≥–æ ID \\- `%d`", adminMsgID), true)
	forwarded := bot.SendForward(
		int64(userID),
		groupID,
		adminMsgID,
	)

	if forwarded.MessageID == 0 {
		log.Printf("[ERROR] Failed to forward message to user %d", userID)
	}
}

func startQuestionSender(interval time.Duration) {
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for range ticker.C {
		sendQuestionsToUsers()
	}
}

func sendQuestionsToUsers() {
	rows, err := DB.DB.Query("SELECT user_id FROM users WHERE user_group != -1 AND banned = 0")
	if err != nil {
		log.Printf("DB error: %v", err)
		return
	}
	defer rows.Close()

	var userID int
	for rows.Next() {
		if err := rows.Scan(&userID); err != nil {
			log.Printf("Error scanning user: %v", err)
			continue
		}
		SendFirstNotAnsweredQuestion(userID)
	}
}

func FormatAnswersForTelegram(answers map[int]string) string {
	var sb strings.Builder
	sb.WriteString("üìù –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n")

	for userID, answer := range answers {
		userNameSurname := DB.GetName(userID)

		userInfo := fmt.Sprintf("üÜî ID: %d", userID)
		userInfo += fmt.Sprintf("\nüë§ –ò–º—è: %s", userNameSurname)

		userName, err := DB.GetUsernameByUserID(userID)
		if err != nil {
			log.Println(err)
			continue
		}
		if userName != "" {
			userInfo += fmt.Sprintf("\nüîó @%s\n", userName)
		}

		sb.WriteString(userInfo)
		sb.WriteString(fmt.Sprintf("üë§ %s\n", strings.TrimSpace(userName)))
		sb.WriteString(fmt.Sprintf("üí¨ %s\n\n", answer))
	}

	return sb.String()
}

func setUsername(update tgbotapi.Update) {
	userName := update.Message.From.UserName
	err := DB.SetUsername(update.Message.From.ID, userName)
	if err != nil {
		log.Println(err)
	}
}

func main() {
	cfg = config.LoadConfig("D:\\moscowsbornaya\\config.json")
	DB.Init()
	defer func(DB *sql.DB) {
		err := DB.Close()
		catchError(err)
	}(DB.DB)
	log.Println("Connected to database")

	go startQuestionSender(1 * time.Minute)

	bot.Init(cfg.TGBotKey)
	u := tgbotapi.NewUpdate(0)

	updates, err := bot.Bot.GetUpdatesChan(u)
	catchError(err)

	for update := range updates {
		if update.Message != nil {
			CatchMessage(update)
		} else if update.CallbackQuery != nil {
			CatchCallbackQuery(update)
		}
	}
}
